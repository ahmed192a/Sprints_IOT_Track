
Blinking_Led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000090c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000013  00800060  00800060  00000980  2**0
                  ALLOC
  2 .stab         00000c6c  00000000  00000000  00000980  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ccd  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_4>
  14:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_5>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_7>
  20:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__vector_8>
  24:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_9>
  28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_10>
  2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 37       	cpi	r26, 0x73	; 115
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 84 04 	jmp	0x908	; 0x908 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
void Timer1_INT();

Timer_ConfigType timer1_Strut;


int main(){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	0f 92       	push	r0
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	/* Enable Global Interrupt */
	SREG |= (1<<7);
#endif


	PORTA_DIR = 0xFF;
  86:	ea e3       	ldi	r30, 0x3A	; 58
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	80 83       	st	Z, r24
	PORTA_OUT = 0x00;
  8e:	eb e3       	ldi	r30, 0x3B	; 59
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	10 82       	st	Z, r1
//	timer1_Strut.mode				= CTC_MODE;
//	timer1_Strut.clock				= F_CPU_1024;
//	timer1_Strut.initial			= 0;
//	timer1_Strut.top_count			= 100;
//	timer1_Strut.interrupt			= FALSE;
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);	// non PWM
  94:	ef e4       	ldi	r30, 0x4F	; 79
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	8c e0       	ldi	r24, 0x0C	; 12
  9a:	80 83       	st	Z, r24
		TCCR1B = (1<<WGM12) | F_CPU_256; 	// set the mode to CTC and the prescaler to 256
  9c:	ee e4       	ldi	r30, 0x4E	; 78
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	8c e0       	ldi	r24, 0x0C	; 12
  a2:	80 83       	st	Z, r24
		TCNT1 = 0;	// start from 0
  a4:	ec e4       	ldi	r30, 0x4C	; 76
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	11 82       	std	Z+1, r1	; 0x01
  aa:	10 82       	st	Z, r1
		OCR1A = 200;	// top = 3907
  ac:	ea e4       	ldi	r30, 0x4A	; 74
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	88 ec       	ldi	r24, 0xC8	; 200
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	91 83       	std	Z+1, r25	; 0x01
  b6:	80 83       	st	Z, r24
		//TIMSK = (1<<OCIE1A);	// enable timer interrupt

#endif

	/* Timer 1 Initialization */
	TIMER1_init(&timer1_Strut);
  b8:	86 e6       	ldi	r24, 0x66	; 102
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 83 02 	call	0x506	; 0x506 <TIMER1_init>
//	PORTA_OUT = 0xFF;


	while(1){
#if !in
		while(!TIFR& (1<<OCF1A));
  c0:	e8 e5       	ldi	r30, 0x58	; 88
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
		TIFR |= 1<<OCF1A;
  c6:	a8 e5       	ldi	r26, 0x58	; 88
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	e8 e5       	ldi	r30, 0x58	; 88
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	8c 93       	st	X, r24
		TOGGLE_BIT(PORTA_OUT,4);
  d4:	ab e3       	ldi	r26, 0x3B	; 59
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	eb e3       	ldi	r30, 0x3B	; 59
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	80 e1       	ldi	r24, 0x10	; 16
  e0:	89 27       	eor	r24, r25
  e2:	8c 93       	st	X, r24
  e4:	ed cf       	rjmp	.-38     	; 0xc0 <main+0x44>

000000e6 <Timer1_INT>:
#endif
	}
}


void Timer1_INT(){
  e6:	df 93       	push	r29
  e8:	cf 93       	push	r28
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62

	TOGGLE_BIT(PORTA_OUT,4);
  ee:	ab e3       	ldi	r26, 0x3B	; 59
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	eb e3       	ldi	r30, 0x3B	; 59
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	90 81       	ld	r25, Z
  f8:	80 e1       	ldi	r24, 0x10	; 16
  fa:	89 27       	eor	r24, r25
  fc:	8c 93       	st	X, r24
	//PORTA_OUT = 0xFF;
	timer1_Strut.initial				= 0;
  fe:	10 92 6c 00 	sts	0x006C, r1
 102:	10 92 6b 00 	sts	0x006B, r1
	if(PORTA_OUT&0x04)
 106:	eb e3       	ldi	r30, 0x3B	; 59
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	88 2f       	mov	r24, r24
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	84 70       	andi	r24, 0x04	; 4
 112:	90 70       	andi	r25, 0x00	; 0
 114:	00 97       	sbiw	r24, 0x00	; 0
 116:	39 f0       	breq	.+14     	; 0x126 <Timer1_INT+0x40>
		timer1_Strut.top_count 		= 1000;
 118:	88 ee       	ldi	r24, 0xE8	; 232
 11a:	93 e0       	ldi	r25, 0x03	; 3
 11c:	90 93 70 00 	sts	0x0070, r25
 120:	80 93 6f 00 	sts	0x006F, r24
 124:	06 c0       	rjmp	.+12     	; 0x132 <Timer1_INT+0x4c>
	else
		timer1_Strut.top_count		= 2000;
 126:	80 ed       	ldi	r24, 0xD0	; 208
 128:	97 e0       	ldi	r25, 0x07	; 7
 12a:	90 93 70 00 	sts	0x0070, r25
 12e:	80 93 6f 00 	sts	0x006F, r24
	TIMER1_init(&timer1_Strut);
 132:	86 e6       	ldi	r24, 0x66	; 102
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 83 02 	call	0x506	; 0x506 <TIMER1_init>
}
 13a:	cf 91       	pop	r28
 13c:	df 91       	pop	r29
 13e:	08 95       	ret

00000140 <__vector_11>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	4f 93       	push	r20
 150:	5f 93       	push	r21
 152:	6f 93       	push	r22
 154:	7f 93       	push	r23
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
 162:	df 93       	push	r29
 164:	cf 93       	push	r28
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
 16a:	80 91 60 00 	lds	r24, 0x0060
 16e:	90 91 61 00 	lds	r25, 0x0061
 172:	00 97       	sbiw	r24, 0x00	; 0
 174:	29 f0       	breq	.+10     	; 0x180 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
 176:	e0 91 60 00 	lds	r30, 0x0060
 17a:	f0 91 61 00 	lds	r31, 0x0061
 17e:	09 95       	icall
	}
}
 180:	cf 91       	pop	r28
 182:	df 91       	pop	r29
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	7f 91       	pop	r23
 192:	6f 91       	pop	r22
 194:	5f 91       	pop	r21
 196:	4f 91       	pop	r20
 198:	3f 91       	pop	r19
 19a:	2f 91       	pop	r18
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
 1c8:	df 93       	push	r29
 1ca:	cf 93       	push	r28
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
 1d0:	80 91 60 00 	lds	r24, 0x0060
 1d4:	90 91 61 00 	lds	r25, 0x0061
 1d8:	00 97       	sbiw	r24, 0x00	; 0
 1da:	29 f0       	breq	.+10     	; 0x1e6 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
 1dc:	e0 91 60 00 	lds	r30, 0x0060
 1e0:	f0 91 61 00 	lds	r31, 0x0061
 1e4:	09 95       	icall
	}
}
 1e6:	cf 91       	pop	r28
 1e8:	df 91       	pop	r29
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	7f 91       	pop	r23
 1f8:	6f 91       	pop	r22
 1fa:	5f 91       	pop	r21
 1fc:	4f 91       	pop	r20
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
 22e:	df 93       	push	r29
 230:	cf 93       	push	r28
 232:	cd b7       	in	r28, 0x3d	; 61
 234:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
 236:	80 91 62 00 	lds	r24, 0x0062
 23a:	90 91 63 00 	lds	r25, 0x0063
 23e:	00 97       	sbiw	r24, 0x00	; 0
 240:	29 f0       	breq	.+10     	; 0x24c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
 242:	e0 91 62 00 	lds	r30, 0x0062
 246:	f0 91 63 00 	lds	r31, 0x0063
 24a:	09 95       	icall
	}
}
 24c:	cf 91       	pop	r28
 24e:	df 91       	pop	r29
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	7f 91       	pop	r23
 25e:	6f 91       	pop	r22
 260:	5f 91       	pop	r21
 262:	4f 91       	pop	r20
 264:	3f 91       	pop	r19
 266:	2f 91       	pop	r18
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	2f 93       	push	r18
 27e:	3f 93       	push	r19
 280:	4f 93       	push	r20
 282:	5f 93       	push	r21
 284:	6f 93       	push	r22
 286:	7f 93       	push	r23
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
 28c:	af 93       	push	r26
 28e:	bf 93       	push	r27
 290:	ef 93       	push	r30
 292:	ff 93       	push	r31
 294:	df 93       	push	r29
 296:	cf 93       	push	r28
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
 29c:	80 91 62 00 	lds	r24, 0x0062
 2a0:	90 91 63 00 	lds	r25, 0x0063
 2a4:	00 97       	sbiw	r24, 0x00	; 0
 2a6:	29 f0       	breq	.+10     	; 0x2b2 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
 2a8:	e0 91 62 00 	lds	r30, 0x0062
 2ac:	f0 91 63 00 	lds	r31, 0x0063
 2b0:	09 95       	icall
	}
}
 2b2:	cf 91       	pop	r28
 2b4:	df 91       	pop	r29
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	bf 91       	pop	r27
 2bc:	af 91       	pop	r26
 2be:	9f 91       	pop	r25
 2c0:	8f 91       	pop	r24
 2c2:	7f 91       	pop	r23
 2c4:	6f 91       	pop	r22
 2c6:	5f 91       	pop	r21
 2c8:	4f 91       	pop	r20
 2ca:	3f 91       	pop	r19
 2cc:	2f 91       	pop	r18
 2ce:	0f 90       	pop	r0
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	0f 90       	pop	r0
 2d4:	1f 90       	pop	r1
 2d6:	18 95       	reti

000002d8 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 2d8:	1f 92       	push	r1
 2da:	0f 92       	push	r0
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	0f 92       	push	r0
 2e0:	11 24       	eor	r1, r1
 2e2:	2f 93       	push	r18
 2e4:	3f 93       	push	r19
 2e6:	4f 93       	push	r20
 2e8:	5f 93       	push	r21
 2ea:	6f 93       	push	r22
 2ec:	7f 93       	push	r23
 2ee:	8f 93       	push	r24
 2f0:	9f 93       	push	r25
 2f2:	af 93       	push	r26
 2f4:	bf 93       	push	r27
 2f6:	ef 93       	push	r30
 2f8:	ff 93       	push	r31
 2fa:	df 93       	push	r29
 2fc:	cf 93       	push	r28
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
 302:	80 91 62 00 	lds	r24, 0x0062
 306:	90 91 63 00 	lds	r25, 0x0063
 30a:	00 97       	sbiw	r24, 0x00	; 0
 30c:	29 f0       	breq	.+10     	; 0x318 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
 30e:	e0 91 62 00 	lds	r30, 0x0062
 312:	f0 91 63 00 	lds	r31, 0x0063
 316:	09 95       	icall
	}
}
 318:	cf 91       	pop	r28
 31a:	df 91       	pop	r29
 31c:	ff 91       	pop	r31
 31e:	ef 91       	pop	r30
 320:	bf 91       	pop	r27
 322:	af 91       	pop	r26
 324:	9f 91       	pop	r25
 326:	8f 91       	pop	r24
 328:	7f 91       	pop	r23
 32a:	6f 91       	pop	r22
 32c:	5f 91       	pop	r21
 32e:	4f 91       	pop	r20
 330:	3f 91       	pop	r19
 332:	2f 91       	pop	r18
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
 348:	2f 93       	push	r18
 34a:	3f 93       	push	r19
 34c:	4f 93       	push	r20
 34e:	5f 93       	push	r21
 350:	6f 93       	push	r22
 352:	7f 93       	push	r23
 354:	8f 93       	push	r24
 356:	9f 93       	push	r25
 358:	af 93       	push	r26
 35a:	bf 93       	push	r27
 35c:	ef 93       	push	r30
 35e:	ff 93       	push	r31
 360:	df 93       	push	r29
 362:	cf 93       	push	r28
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
 368:	80 91 64 00 	lds	r24, 0x0064
 36c:	90 91 65 00 	lds	r25, 0x0065
 370:	00 97       	sbiw	r24, 0x00	; 0
 372:	29 f0       	breq	.+10     	; 0x37e <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
 374:	e0 91 64 00 	lds	r30, 0x0064
 378:	f0 91 65 00 	lds	r31, 0x0065
 37c:	09 95       	icall
	}
}
 37e:	cf 91       	pop	r28
 380:	df 91       	pop	r29
 382:	ff 91       	pop	r31
 384:	ef 91       	pop	r30
 386:	bf 91       	pop	r27
 388:	af 91       	pop	r26
 38a:	9f 91       	pop	r25
 38c:	8f 91       	pop	r24
 38e:	7f 91       	pop	r23
 390:	6f 91       	pop	r22
 392:	5f 91       	pop	r21
 394:	4f 91       	pop	r20
 396:	3f 91       	pop	r19
 398:	2f 91       	pop	r18
 39a:	0f 90       	pop	r0
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	0f 90       	pop	r0
 3a0:	1f 90       	pop	r1
 3a2:	18 95       	reti

000003a4 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 3a4:	1f 92       	push	r1
 3a6:	0f 92       	push	r0
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	0f 92       	push	r0
 3ac:	11 24       	eor	r1, r1
 3ae:	2f 93       	push	r18
 3b0:	3f 93       	push	r19
 3b2:	4f 93       	push	r20
 3b4:	5f 93       	push	r21
 3b6:	6f 93       	push	r22
 3b8:	7f 93       	push	r23
 3ba:	8f 93       	push	r24
 3bc:	9f 93       	push	r25
 3be:	af 93       	push	r26
 3c0:	bf 93       	push	r27
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
 3c6:	df 93       	push	r29
 3c8:	cf 93       	push	r28
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
 3ce:	80 91 64 00 	lds	r24, 0x0064
 3d2:	90 91 65 00 	lds	r25, 0x0065
 3d6:	00 97       	sbiw	r24, 0x00	; 0
 3d8:	29 f0       	breq	.+10     	; 0x3e4 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
 3da:	e0 91 64 00 	lds	r30, 0x0064
 3de:	f0 91 65 00 	lds	r31, 0x0065
 3e2:	09 95       	icall
	}
}
 3e4:	cf 91       	pop	r28
 3e6:	df 91       	pop	r29
 3e8:	ff 91       	pop	r31
 3ea:	ef 91       	pop	r30
 3ec:	bf 91       	pop	r27
 3ee:	af 91       	pop	r26
 3f0:	9f 91       	pop	r25
 3f2:	8f 91       	pop	r24
 3f4:	7f 91       	pop	r23
 3f6:	6f 91       	pop	r22
 3f8:	5f 91       	pop	r21
 3fa:	4f 91       	pop	r20
 3fc:	3f 91       	pop	r19
 3fe:	2f 91       	pop	r18
 400:	0f 90       	pop	r0
 402:	0f be       	out	0x3f, r0	; 63
 404:	0f 90       	pop	r0
 406:	1f 90       	pop	r1
 408:	18 95       	reti

0000040a <TIMER0_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void TIMER0_init(const Timer_ConfigType * Config_Ptr)
{
 40a:	df 93       	push	r29
 40c:	cf 93       	push	r28
 40e:	00 d0       	rcall	.+0      	; 0x410 <TIMER0_init+0x6>
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	9a 83       	std	Y+2, r25	; 0x02
 416:	89 83       	std	Y+1, r24	; 0x01
	/*TCCR0 &= 0x00;
	TCNT0 &= 0x00;
	OCR0  &= 0x00;
*/
	/* non PWM Mode */
	TCCR0 = (1<<FOC0);
 418:	e3 e5       	ldi	r30, 0x53	; 83
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 e8       	ldi	r24, 0x80	; 128
 41e:	80 83       	st	Z, r24
	/*set initial value */
	TCNT0 = Config_Ptr->initial;
 420:	a2 e5       	ldi	r26, 0x52	; 82
 422:	b0 e0       	ldi	r27, 0x00	; 0
 424:	e9 81       	ldd	r30, Y+1	; 0x01
 426:	fa 81       	ldd	r31, Y+2	; 0x02
 428:	85 81       	ldd	r24, Z+5	; 0x05
 42a:	96 81       	ldd	r25, Z+6	; 0x06
 42c:	8c 93       	st	X, r24

	/*set compare value for compare mode*/
	OCR0 = Config_Ptr->compare_value;
 42e:	ac e5       	ldi	r26, 0x5C	; 92
 430:	b0 e0       	ldi	r27, 0x00	; 0
 432:	e9 81       	ldd	r30, Y+1	; 0x01
 434:	fa 81       	ldd	r31, Y+2	; 0x02
 436:	87 81       	ldd	r24, Z+7	; 0x07
 438:	90 85       	ldd	r25, Z+8	; 0x08
 43a:	8c 93       	st	X, r24


	if((Config_Ptr->OutputPin) == OC0){
 43c:	e9 81       	ldd	r30, Y+1	; 0x01
 43e:	fa 81       	ldd	r31, Y+2	; 0x02
 440:	84 81       	ldd	r24, Z+4	; 0x04
 442:	83 30       	cpi	r24, 0x03	; 3
 444:	39 f4       	brne	.+14     	; 0x454 <TIMER0_init+0x4a>
		// configure the output pin PB3 in compare mode
		PORTD_DIR |= (1 << OC0);
 446:	a1 e3       	ldi	r26, 0x31	; 49
 448:	b0 e0       	ldi	r27, 0x00	; 0
 44a:	e1 e3       	ldi	r30, 0x31	; 49
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	88 60       	ori	r24, 0x08	; 8
 452:	8c 93       	st	X, r24
	}

	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
 454:	e9 81       	ldd	r30, Y+1	; 0x01
 456:	fa 81       	ldd	r31, Y+2	; 0x02
 458:	81 81       	ldd	r24, Z+1	; 0x01
 45a:	88 23       	and	r24, r24
 45c:	41 f4       	brne	.+16     	; 0x46e <TIMER0_init+0x64>
		/*Enable interrupt for overflow mode*/
		TIMSK |= (1 << TOIE0);
 45e:	a9 e5       	ldi	r26, 0x59	; 89
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	e9 e5       	ldi	r30, 0x59	; 89
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	81 60       	ori	r24, 0x01	; 1
 46a:	8c 93       	st	X, r24
 46c:	0c c0       	rjmp	.+24     	; 0x486 <TIMER0_init+0x7c>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
 46e:	e9 81       	ldd	r30, Y+1	; 0x01
 470:	fa 81       	ldd	r31, Y+2	; 0x02
 472:	81 81       	ldd	r24, Z+1	; 0x01
 474:	81 30       	cpi	r24, 0x01	; 1
 476:	39 f4       	brne	.+14     	; 0x486 <TIMER0_init+0x7c>
		/*Enable interrupt for compare mode*/
		TIMSK |= (1 << OCIE0);
 478:	a9 e5       	ldi	r26, 0x59	; 89
 47a:	b0 e0       	ldi	r27, 0x00	; 0
 47c:	e9 e5       	ldi	r30, 0x59	; 89
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	82 60       	ori	r24, 0x02	; 2
 484:	8c 93       	st	X, r24
	}

	/*configure the mode of the timer*/
	TCCR0 =  (TCCR0 & ~(0x48) ) | ( ( (Config_Ptr->mode) << WGM00) & 0x48 ) ;
 486:	a3 e5       	ldi	r26, 0x53	; 83
 488:	b0 e0       	ldi	r27, 0x00	; 0
 48a:	e3 e5       	ldi	r30, 0x53	; 83
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	28 2f       	mov	r18, r24
 492:	27 7b       	andi	r18, 0xB7	; 183
 494:	e9 81       	ldd	r30, Y+1	; 0x01
 496:	fa 81       	ldd	r31, Y+2	; 0x02
 498:	81 81       	ldd	r24, Z+1	; 0x01
 49a:	88 2f       	mov	r24, r24
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	00 24       	eor	r0, r0
 4a0:	96 95       	lsr	r25
 4a2:	87 95       	ror	r24
 4a4:	07 94       	ror	r0
 4a6:	96 95       	lsr	r25
 4a8:	87 95       	ror	r24
 4aa:	07 94       	ror	r0
 4ac:	98 2f       	mov	r25, r24
 4ae:	80 2d       	mov	r24, r0
 4b0:	88 74       	andi	r24, 0x48	; 72
 4b2:	82 2b       	or	r24, r18
 4b4:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR0 = (TCCR0 & 0XCF) | ( ( (Config_Ptr->compare_output) & 0X03) << COM00 );
 4b6:	a3 e5       	ldi	r26, 0x53	; 83
 4b8:	b0 e0       	ldi	r27, 0x00	; 0
 4ba:	e3 e5       	ldi	r30, 0x53	; 83
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	80 81       	ld	r24, Z
 4c0:	28 2f       	mov	r18, r24
 4c2:	2f 7c       	andi	r18, 0xCF	; 207
 4c4:	e9 81       	ldd	r30, Y+1	; 0x01
 4c6:	fa 81       	ldd	r31, Y+2	; 0x02
 4c8:	82 81       	ldd	r24, Z+2	; 0x02
 4ca:	88 2f       	mov	r24, r24
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	83 70       	andi	r24, 0x03	; 3
 4d0:	90 70       	andi	r25, 0x00	; 0
 4d2:	82 95       	swap	r24
 4d4:	92 95       	swap	r25
 4d6:	90 7f       	andi	r25, 0xF0	; 240
 4d8:	98 27       	eor	r25, r24
 4da:	80 7f       	andi	r24, 0xF0	; 240
 4dc:	98 27       	eor	r25, r24
 4de:	82 2b       	or	r24, r18
 4e0:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->clock & 0X07);
 4e2:	a3 e5       	ldi	r26, 0x53	; 83
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	e3 e5       	ldi	r30, 0x53	; 83
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	98 2f       	mov	r25, r24
 4ee:	98 7f       	andi	r25, 0xF8	; 248
 4f0:	e9 81       	ldd	r30, Y+1	; 0x01
 4f2:	fa 81       	ldd	r31, Y+2	; 0x02
 4f4:	80 81       	ld	r24, Z
 4f6:	87 70       	andi	r24, 0x07	; 7
 4f8:	89 2b       	or	r24, r25
 4fa:	8c 93       	st	X, r24
}
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	cf 91       	pop	r28
 502:	df 91       	pop	r29
 504:	08 95       	ret

00000506 <TIMER1_init>:

void TIMER1_init(const Timer_ConfigType * Config_Ptr)
{
 506:	df 93       	push	r29
 508:	cf 93       	push	r28
 50a:	00 d0       	rcall	.+0      	; 0x50c <TIMER1_init+0x6>
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
 510:	9a 83       	std	Y+2, r25	; 0x02
 512:	89 83       	std	Y+1, r24	; 0x01
/*			TCNT1  = 0;
			OCR1A  = 0;
			OCR1B  = 0;
*/
	/*set the initial value*/
	TCNT1 = ( (Config_Ptr -> initial) );
 514:	ac e4       	ldi	r26, 0x4C	; 76
 516:	b0 e0       	ldi	r27, 0x00	; 0
 518:	e9 81       	ldd	r30, Y+1	; 0x01
 51a:	fa 81       	ldd	r31, Y+2	; 0x02
 51c:	85 81       	ldd	r24, Z+5	; 0x05
 51e:	96 81       	ldd	r25, Z+6	; 0x06
 520:	11 96       	adiw	r26, 0x01	; 1
 522:	9c 93       	st	X, r25
 524:	8e 93       	st	-X, r24

	if( (Config_Ptr->mode ) == NORMAL_MODE )
 526:	e9 81       	ldd	r30, Y+1	; 0x01
 528:	fa 81       	ldd	r31, Y+2	; 0x02
 52a:	81 81       	ldd	r24, Z+1	; 0x01
 52c:	88 23       	and	r24, r24
 52e:	91 f4       	brne	.+36     	; 0x554 <TIMER1_init+0x4e>
	{
		/*  Non PWM Mode */
		TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
 530:	ef e4       	ldi	r30, 0x4F	; 79
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	8c e0       	ldi	r24, 0x0C	; 12
 536:	80 83       	st	Z, r24

		if(Config_Ptr->interrupt){
 538:	e9 81       	ldd	r30, Y+1	; 0x01
 53a:	fa 81       	ldd	r31, Y+2	; 0x02
 53c:	83 85       	ldd	r24, Z+11	; 0x0b
 53e:	88 23       	and	r24, r24
 540:	09 f4       	brne	.+2      	; 0x544 <TIMER1_init+0x3e>
 542:	ea c0       	rjmp	.+468    	; 0x718 <TIMER1_init+0x212>
			/* Enable interrupt FOR normal mode */
			TIMSK |= (1 << TOIE1);
 544:	a9 e5       	ldi	r26, 0x59	; 89
 546:	b0 e0       	ldi	r27, 0x00	; 0
 548:	e9 e5       	ldi	r30, 0x59	; 89
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	84 60       	ori	r24, 0x04	; 4
 550:	8c 93       	st	X, r24
 552:	e2 c0       	rjmp	.+452    	; 0x718 <TIMER1_init+0x212>
		}

	}
	else if((Config_Ptr->mode ) == CTC_MODE){
 554:	e9 81       	ldd	r30, Y+1	; 0x01
 556:	fa 81       	ldd	r31, Y+2	; 0x02
 558:	81 81       	ldd	r24, Z+1	; 0x01
 55a:	81 30       	cpi	r24, 0x01	; 1
 55c:	d9 f4       	brne	.+54     	; 0x594 <TIMER1_init+0x8e>
		/*  Non PWM Mode */
		TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
 55e:	ef e4       	ldi	r30, 0x4F	; 79
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	8c e0       	ldi	r24, 0x0C	; 12
 564:	80 83       	st	Z, r24

		if(Config_Ptr->interrupt){
 566:	e9 81       	ldd	r30, Y+1	; 0x01
 568:	fa 81       	ldd	r31, Y+2	; 0x02
 56a:	83 85       	ldd	r24, Z+11	; 0x0b
 56c:	88 23       	and	r24, r24
 56e:	39 f0       	breq	.+14     	; 0x57e <TIMER1_init+0x78>
			/* Enable interrupt FOR normal mode */
			TIMSK |= (1 << OCIE1A);
 570:	a9 e5       	ldi	r26, 0x59	; 89
 572:	b0 e0       	ldi	r27, 0x00	; 0
 574:	e9 e5       	ldi	r30, 0x59	; 89
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	80 61       	ori	r24, 0x10	; 16
 57c:	8c 93       	st	X, r24
		}
		OCR1A    = ((Config_Ptr->top_count));
 57e:	ea e4       	ldi	r30, 0x4A	; 74
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	a9 81       	ldd	r26, Y+1	; 0x01
 584:	ba 81       	ldd	r27, Y+2	; 0x02
 586:	19 96       	adiw	r26, 0x09	; 9
 588:	8d 91       	ld	r24, X+
 58a:	9c 91       	ld	r25, X
 58c:	1a 97       	sbiw	r26, 0x0a	; 10
 58e:	91 83       	std	Z+1, r25	; 0x01
 590:	80 83       	st	Z, r24
 592:	c2 c0       	rjmp	.+388    	; 0x718 <TIMER1_init+0x212>
//		/* Check for OC1B */
//		else if ((Config_Ptr -> OutputPin) == OC1B){
//			// configure the output pin PD4 in compare mode
//			PORTD_DIR |= (1 << OC1B);
//		}
		if ((Config_Ptr->channel) == CHANNEL_A)
 594:	e9 81       	ldd	r30, Y+1	; 0x01
 596:	fa 81       	ldd	r31, Y+2	; 0x02
 598:	84 85       	ldd	r24, Z+12	; 0x0c
 59a:	88 23       	and	r24, r24
 59c:	09 f0       	breq	.+2      	; 0x5a0 <TIMER1_init+0x9a>
 59e:	5d c0       	rjmp	.+186    	; 0x65a <TIMER1_init+0x154>
		{
			// configure the output pin PD5 in compare mode
				PORTD_DIR |= (1 << OC1A);
 5a0:	a1 e3       	ldi	r26, 0x31	; 49
 5a2:	b0 e0       	ldi	r27, 0x00	; 0
 5a4:	e1 e3       	ldi	r30, 0x31	; 49
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	80 81       	ld	r24, Z
 5aa:	80 62       	ori	r24, 0x20	; 32
 5ac:	8c 93       	st	X, r24

			/*set compare value for compare mode channel A*/
			OCR1A  = ((Config_Ptr->compare_value));
 5ae:	aa e4       	ldi	r26, 0x4A	; 74
 5b0:	b0 e0       	ldi	r27, 0x00	; 0
 5b2:	e9 81       	ldd	r30, Y+1	; 0x01
 5b4:	fa 81       	ldd	r31, Y+2	; 0x02
 5b6:	87 81       	ldd	r24, Z+7	; 0x07
 5b8:	90 85       	ldd	r25, Z+8	; 0x08
 5ba:	11 96       	adiw	r26, 0x01	; 1
 5bc:	9c 93       	st	X, r25
 5be:	8e 93       	st	-X, r24
			ICR1   = ((Config_Ptr->top_count));
 5c0:	a6 e4       	ldi	r26, 0x46	; 70
 5c2:	b0 e0       	ldi	r27, 0x00	; 0
 5c4:	e9 81       	ldd	r30, Y+1	; 0x01
 5c6:	fa 81       	ldd	r31, Y+2	; 0x02
 5c8:	81 85       	ldd	r24, Z+9	; 0x09
 5ca:	92 85       	ldd	r25, Z+10	; 0x0a
 5cc:	11 96       	adiw	r26, 0x01	; 1
 5ce:	9c 93       	st	X, r25
 5d0:	8e 93       	st	-X, r24
			if(Config_Ptr->interrupt){
 5d2:	e9 81       	ldd	r30, Y+1	; 0x01
 5d4:	fa 81       	ldd	r31, Y+2	; 0x02
 5d6:	83 85       	ldd	r24, Z+11	; 0x0b
 5d8:	88 23       	and	r24, r24
 5da:	39 f0       	breq	.+14     	; 0x5ea <TIMER1_init+0xe4>
				/* Enable interrupt for compare mode channel A */
				TIMSK |= (1 << OCIE1A);
 5dc:	a9 e5       	ldi	r26, 0x59	; 89
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	e9 e5       	ldi	r30, 0x59	; 89
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	80 81       	ld	r24, Z
 5e6:	80 61       	ori	r24, 0x10	; 16
 5e8:	8c 93       	st	X, r24
			}
			/* Choose the operation that should be done in compare match occurs in channel A */
			TCCR1A = ( ( TCCR1A & 0x3F ) | ( (Config_Ptr -> compare_output) << COM1A0) );
 5ea:	af e4       	ldi	r26, 0x4F	; 79
 5ec:	b0 e0       	ldi	r27, 0x00	; 0
 5ee:	ef e4       	ldi	r30, 0x4F	; 79
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	80 81       	ld	r24, Z
 5f4:	28 2f       	mov	r18, r24
 5f6:	2f 73       	andi	r18, 0x3F	; 63
 5f8:	e9 81       	ldd	r30, Y+1	; 0x01
 5fa:	fa 81       	ldd	r31, Y+2	; 0x02
 5fc:	82 81       	ldd	r24, Z+2	; 0x02
 5fe:	88 2f       	mov	r24, r24
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	00 24       	eor	r0, r0
 604:	96 95       	lsr	r25
 606:	87 95       	ror	r24
 608:	07 94       	ror	r0
 60a:	96 95       	lsr	r25
 60c:	87 95       	ror	r24
 60e:	07 94       	ror	r0
 610:	98 2f       	mov	r25, r24
 612:	80 2d       	mov	r24, r0
 614:	82 2b       	or	r24, r18
 616:	8c 93       	st	X, r24
			TCCR1A = ( ( TCCR1A & 0xFC ) | ( (Config_Ptr -> PWM) << WGM10 ) );
 618:	af e4       	ldi	r26, 0x4F	; 79
 61a:	b0 e0       	ldi	r27, 0x00	; 0
 61c:	ef e4       	ldi	r30, 0x4F	; 79
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	98 2f       	mov	r25, r24
 624:	9c 7f       	andi	r25, 0xFC	; 252
 626:	e9 81       	ldd	r30, Y+1	; 0x01
 628:	fa 81       	ldd	r31, Y+2	; 0x02
 62a:	83 81       	ldd	r24, Z+3	; 0x03
 62c:	89 2b       	or	r24, r25
 62e:	8c 93       	st	X, r24
			TCCR1B = ( ( TCCR1B & 0xE7 ) | ( (Config_Ptr -> mode)<< WGM12 ) );
 630:	ae e4       	ldi	r26, 0x4E	; 78
 632:	b0 e0       	ldi	r27, 0x00	; 0
 634:	ee e4       	ldi	r30, 0x4E	; 78
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	28 2f       	mov	r18, r24
 63c:	27 7e       	andi	r18, 0xE7	; 231
 63e:	e9 81       	ldd	r30, Y+1	; 0x01
 640:	fa 81       	ldd	r31, Y+2	; 0x02
 642:	81 81       	ldd	r24, Z+1	; 0x01
 644:	88 2f       	mov	r24, r24
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	88 0f       	add	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	82 2b       	or	r24, r18
 656:	8c 93       	st	X, r24
 658:	5f c0       	rjmp	.+190    	; 0x718 <TIMER1_init+0x212>

		}

		else if ( (Config_Ptr->channel) == CHANNEL_B){
 65a:	e9 81       	ldd	r30, Y+1	; 0x01
 65c:	fa 81       	ldd	r31, Y+2	; 0x02
 65e:	84 85       	ldd	r24, Z+12	; 0x0c
 660:	81 30       	cpi	r24, 0x01	; 1
 662:	09 f0       	breq	.+2      	; 0x666 <TIMER1_init+0x160>
 664:	59 c0       	rjmp	.+178    	; 0x718 <TIMER1_init+0x212>
			// configure the output pin PD4 in compare mode
			PORTD_DIR |= (1 << OC1B);
 666:	a1 e3       	ldi	r26, 0x31	; 49
 668:	b0 e0       	ldi	r27, 0x00	; 0
 66a:	e1 e3       	ldi	r30, 0x31	; 49
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	80 81       	ld	r24, Z
 670:	80 61       	ori	r24, 0x10	; 16
 672:	8c 93       	st	X, r24

			/*set compare value for compare mode channel B*/
			OCR1B  = ((Config_Ptr -> compare_value));
 674:	a8 e4       	ldi	r26, 0x48	; 72
 676:	b0 e0       	ldi	r27, 0x00	; 0
 678:	e9 81       	ldd	r30, Y+1	; 0x01
 67a:	fa 81       	ldd	r31, Y+2	; 0x02
 67c:	87 81       	ldd	r24, Z+7	; 0x07
 67e:	90 85       	ldd	r25, Z+8	; 0x08
 680:	11 96       	adiw	r26, 0x01	; 1
 682:	9c 93       	st	X, r25
 684:	8e 93       	st	-X, r24
			ICR1   = ((Config_Ptr->top_count));
 686:	a6 e4       	ldi	r26, 0x46	; 70
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	e9 81       	ldd	r30, Y+1	; 0x01
 68c:	fa 81       	ldd	r31, Y+2	; 0x02
 68e:	81 85       	ldd	r24, Z+9	; 0x09
 690:	92 85       	ldd	r25, Z+10	; 0x0a
 692:	11 96       	adiw	r26, 0x01	; 1
 694:	9c 93       	st	X, r25
 696:	8e 93       	st	-X, r24
			if(Config_Ptr->interrupt){
 698:	e9 81       	ldd	r30, Y+1	; 0x01
 69a:	fa 81       	ldd	r31, Y+2	; 0x02
 69c:	83 85       	ldd	r24, Z+11	; 0x0b
 69e:	88 23       	and	r24, r24
 6a0:	39 f0       	breq	.+14     	; 0x6b0 <TIMER1_init+0x1aa>
				/* Enable interrupt for compare mode channel B */
				TIMSK |= (1 << OCIE1B);
 6a2:	a9 e5       	ldi	r26, 0x59	; 89
 6a4:	b0 e0       	ldi	r27, 0x00	; 0
 6a6:	e9 e5       	ldi	r30, 0x59	; 89
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	80 81       	ld	r24, Z
 6ac:	88 60       	ori	r24, 0x08	; 8
 6ae:	8c 93       	st	X, r24
			}
			/* Choose the operation that should be done in compare match occurs in channel B */
			TCCR1A = ( ( TCCR1A & 0xCF ) | ( (Config_Ptr -> compare_output) << COM1B0) );
 6b0:	af e4       	ldi	r26, 0x4F	; 79
 6b2:	b0 e0       	ldi	r27, 0x00	; 0
 6b4:	ef e4       	ldi	r30, 0x4F	; 79
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	80 81       	ld	r24, Z
 6ba:	28 2f       	mov	r18, r24
 6bc:	2f 7c       	andi	r18, 0xCF	; 207
 6be:	e9 81       	ldd	r30, Y+1	; 0x01
 6c0:	fa 81       	ldd	r31, Y+2	; 0x02
 6c2:	82 81       	ldd	r24, Z+2	; 0x02
 6c4:	88 2f       	mov	r24, r24
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	82 95       	swap	r24
 6ca:	92 95       	swap	r25
 6cc:	90 7f       	andi	r25, 0xF0	; 240
 6ce:	98 27       	eor	r25, r24
 6d0:	80 7f       	andi	r24, 0xF0	; 240
 6d2:	98 27       	eor	r25, r24
 6d4:	82 2b       	or	r24, r18
 6d6:	8c 93       	st	X, r24
			/*configure the mode of the timer*/
			TCCR1A = ( ( TCCR1A & 0xFC ) | ( (Config_Ptr -> PWM) << WGM10 ) );
 6d8:	af e4       	ldi	r26, 0x4F	; 79
 6da:	b0 e0       	ldi	r27, 0x00	; 0
 6dc:	ef e4       	ldi	r30, 0x4F	; 79
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	80 81       	ld	r24, Z
 6e2:	98 2f       	mov	r25, r24
 6e4:	9c 7f       	andi	r25, 0xFC	; 252
 6e6:	e9 81       	ldd	r30, Y+1	; 0x01
 6e8:	fa 81       	ldd	r31, Y+2	; 0x02
 6ea:	83 81       	ldd	r24, Z+3	; 0x03
 6ec:	89 2b       	or	r24, r25
 6ee:	8c 93       	st	X, r24
			TCCR1B = ( ( TCCR1B & 0xE7 ) | ( (Config_Ptr -> mode)<< WGM12 ) );
 6f0:	ae e4       	ldi	r26, 0x4E	; 78
 6f2:	b0 e0       	ldi	r27, 0x00	; 0
 6f4:	ee e4       	ldi	r30, 0x4E	; 78
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
 6fa:	28 2f       	mov	r18, r24
 6fc:	27 7e       	andi	r18, 0xE7	; 231
 6fe:	e9 81       	ldd	r30, Y+1	; 0x01
 700:	fa 81       	ldd	r31, Y+2	; 0x02
 702:	81 81       	ldd	r24, Z+1	; 0x01
 704:	88 2f       	mov	r24, r24
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	88 0f       	add	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	82 2b       	or	r24, r18
 716:	8c 93       	st	X, r24
		}
	}

	TCCR1B = ( ( TCCR1B & 0xE7 ) | ( (Config_Ptr -> mode)<< WGM12 ) );
 718:	ae e4       	ldi	r26, 0x4E	; 78
 71a:	b0 e0       	ldi	r27, 0x00	; 0
 71c:	ee e4       	ldi	r30, 0x4E	; 78
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	80 81       	ld	r24, Z
 722:	28 2f       	mov	r18, r24
 724:	27 7e       	andi	r18, 0xE7	; 231
 726:	e9 81       	ldd	r30, Y+1	; 0x01
 728:	fa 81       	ldd	r31, Y+2	; 0x02
 72a:	81 81       	ldd	r24, Z+1	; 0x01
 72c:	88 2f       	mov	r24, r24
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	88 0f       	add	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	82 2b       	or	r24, r18
 73e:	8c 93       	st	X, r24
		/* choose the timer clock (F_CPU / prescaler)*/
	TCCR1B = ( ( TCCR1B & 0xF8 ) | (Config_Ptr -> clock) );
 740:	ae e4       	ldi	r26, 0x4E	; 78
 742:	b0 e0       	ldi	r27, 0x00	; 0
 744:	ee e4       	ldi	r30, 0x4E	; 78
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	80 81       	ld	r24, Z
 74a:	98 2f       	mov	r25, r24
 74c:	98 7f       	andi	r25, 0xF8	; 248
 74e:	e9 81       	ldd	r30, Y+1	; 0x01
 750:	fa 81       	ldd	r31, Y+2	; 0x02
 752:	80 81       	ld	r24, Z
 754:	89 2b       	or	r24, r25
 756:	8c 93       	st	X, r24
}
 758:	0f 90       	pop	r0
 75a:	0f 90       	pop	r0
 75c:	cf 91       	pop	r28
 75e:	df 91       	pop	r29
 760:	08 95       	ret

00000762 <TIMER2_init>:

void TIMER2_init(const Timer_ConfigType * Config_Ptr)
{
 762:	df 93       	push	r29
 764:	cf 93       	push	r28
 766:	00 d0       	rcall	.+0      	; 0x768 <TIMER2_init+0x6>
 768:	cd b7       	in	r28, 0x3d	; 61
 76a:	de b7       	in	r29, 0x3e	; 62
 76c:	9a 83       	std	Y+2, r25	; 0x02
 76e:	89 83       	std	Y+1, r24	; 0x01
	/* Clear Registers before do anything */
/*	TCCR2 &= 0x00;
	TCNT2 &= 0x00;
*/
	/*set the initail value of the timer*/
	TCNT2 = Config_Ptr->initial;
 770:	a4 e4       	ldi	r26, 0x44	; 68
 772:	b0 e0       	ldi	r27, 0x00	; 0
 774:	e9 81       	ldd	r30, Y+1	; 0x01
 776:	fa 81       	ldd	r31, Y+2	; 0x02
 778:	85 81       	ldd	r24, Z+5	; 0x05
 77a:	96 81       	ldd	r25, Z+6	; 0x06
 77c:	8c 93       	st	X, r24
	/*set the compare value of the compare mode timer*/
	OCR2 = Config_Ptr->compare_value;
 77e:	a3 e4       	ldi	r26, 0x43	; 67
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	e9 81       	ldd	r30, Y+1	; 0x01
 784:	fa 81       	ldd	r31, Y+2	; 0x02
 786:	87 81       	ldd	r24, Z+7	; 0x07
 788:	90 85       	ldd	r25, Z+8	; 0x08
 78a:	8c 93       	st	X, r24
	/*non PWM mode*/
	TCCR2 = (1<<FOC2);
 78c:	e5 e4       	ldi	r30, 0x45	; 69
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 e8       	ldi	r24, 0x80	; 128
 792:	80 83       	st	Z, r24

	/* Check which timer mode is chosen */
	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
 794:	e9 81       	ldd	r30, Y+1	; 0x01
 796:	fa 81       	ldd	r31, Y+2	; 0x02
 798:	81 81       	ldd	r24, Z+1	; 0x01
 79a:	88 23       	and	r24, r24
 79c:	41 f4       	brne	.+16     	; 0x7ae <TIMER2_init+0x4c>
	/*	Enable interrupt for normal mode */
		TIMSK |= (1 << TOIE2);
 79e:	a9 e5       	ldi	r26, 0x59	; 89
 7a0:	b0 e0       	ldi	r27, 0x00	; 0
 7a2:	e9 e5       	ldi	r30, 0x59	; 89
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	80 81       	ld	r24, Z
 7a8:	80 64       	ori	r24, 0x40	; 64
 7aa:	8c 93       	st	X, r24
 7ac:	0c c0       	rjmp	.+24     	; 0x7c6 <TIMER2_init+0x64>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
 7ae:	e9 81       	ldd	r30, Y+1	; 0x01
 7b0:	fa 81       	ldd	r31, Y+2	; 0x02
 7b2:	81 81       	ldd	r24, Z+1	; 0x01
 7b4:	81 30       	cpi	r24, 0x01	; 1
 7b6:	39 f4       	brne	.+14     	; 0x7c6 <TIMER2_init+0x64>

		/*	 Enable interrupt for compare mode */
		TIMSK |= (1 << OCIE2);
 7b8:	a9 e5       	ldi	r26, 0x59	; 89
 7ba:	b0 e0       	ldi	r27, 0x00	; 0
 7bc:	e9 e5       	ldi	r30, 0x59	; 89
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	80 81       	ld	r24, Z
 7c2:	80 68       	ori	r24, 0x80	; 128
 7c4:	8c 93       	st	X, r24
	}
	/*configure the mode of the timer*/
	TCCR2 = (TCCR2 & 0XB7) | ((Config_Ptr->mode & 0X48)<< WGM20);
 7c6:	a5 e4       	ldi	r26, 0x45	; 69
 7c8:	b0 e0       	ldi	r27, 0x00	; 0
 7ca:	e5 e4       	ldi	r30, 0x45	; 69
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	80 81       	ld	r24, Z
 7d0:	28 2f       	mov	r18, r24
 7d2:	27 7b       	andi	r18, 0xB7	; 183
 7d4:	e9 81       	ldd	r30, Y+1	; 0x01
 7d6:	fa 81       	ldd	r31, Y+2	; 0x02
 7d8:	81 81       	ldd	r24, Z+1	; 0x01
 7da:	88 2f       	mov	r24, r24
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	88 74       	andi	r24, 0x48	; 72
 7e0:	90 70       	andi	r25, 0x00	; 0
 7e2:	00 24       	eor	r0, r0
 7e4:	96 95       	lsr	r25
 7e6:	87 95       	ror	r24
 7e8:	07 94       	ror	r0
 7ea:	96 95       	lsr	r25
 7ec:	87 95       	ror	r24
 7ee:	07 94       	ror	r0
 7f0:	98 2f       	mov	r25, r24
 7f2:	80 2d       	mov	r24, r0
 7f4:	82 2b       	or	r24, r18
 7f6:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR2 = (TCCR2 & 0XCF) | ((Config_Ptr->compare_output & 0X03)<<COM20);
 7f8:	a5 e4       	ldi	r26, 0x45	; 69
 7fa:	b0 e0       	ldi	r27, 0x00	; 0
 7fc:	e5 e4       	ldi	r30, 0x45	; 69
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	80 81       	ld	r24, Z
 802:	28 2f       	mov	r18, r24
 804:	2f 7c       	andi	r18, 0xCF	; 207
 806:	e9 81       	ldd	r30, Y+1	; 0x01
 808:	fa 81       	ldd	r31, Y+2	; 0x02
 80a:	82 81       	ldd	r24, Z+2	; 0x02
 80c:	88 2f       	mov	r24, r24
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	83 70       	andi	r24, 0x03	; 3
 812:	90 70       	andi	r25, 0x00	; 0
 814:	82 95       	swap	r24
 816:	92 95       	swap	r25
 818:	90 7f       	andi	r25, 0xF0	; 240
 81a:	98 27       	eor	r25, r24
 81c:	80 7f       	andi	r24, 0xF0	; 240
 81e:	98 27       	eor	r25, r24
 820:	82 2b       	or	r24, r18
 822:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->clock & 0X07);
 824:	a5 e4       	ldi	r26, 0x45	; 69
 826:	b0 e0       	ldi	r27, 0x00	; 0
 828:	e5 e4       	ldi	r30, 0x45	; 69
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	80 81       	ld	r24, Z
 82e:	98 2f       	mov	r25, r24
 830:	98 7f       	andi	r25, 0xF8	; 248
 832:	e9 81       	ldd	r30, Y+1	; 0x01
 834:	fa 81       	ldd	r31, Y+2	; 0x02
 836:	80 81       	ld	r24, Z
 838:	87 70       	andi	r24, 0x07	; 7
 83a:	89 2b       	or	r24, r25
 83c:	8c 93       	st	X, r24
}
 83e:	0f 90       	pop	r0
 840:	0f 90       	pop	r0
 842:	cf 91       	pop	r28
 844:	df 91       	pop	r29
 846:	08 95       	ret

00000848 <Timer0_Stop>:

void Timer0_Stop()
{
 848:	df 93       	push	r29
 84a:	cf 93       	push	r28
 84c:	cd b7       	in	r28, 0x3d	; 61
 84e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0b11111000; // stop the clock
 850:	a3 e5       	ldi	r26, 0x53	; 83
 852:	b0 e0       	ldi	r27, 0x00	; 0
 854:	e3 e5       	ldi	r30, 0x53	; 83
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	80 81       	ld	r24, Z
 85a:	88 7f       	andi	r24, 0xF8	; 248
 85c:	8c 93       	st	X, r24
}
 85e:	cf 91       	pop	r28
 860:	df 91       	pop	r29
 862:	08 95       	ret

00000864 <Timer1_Stop>:

void Timer1_Stop(){
 864:	df 93       	push	r29
 866:	cf 93       	push	r28
 868:	cd b7       	in	r28, 0x3d	; 61
 86a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000; // stop the clock
 86c:	ae e4       	ldi	r26, 0x4E	; 78
 86e:	b0 e0       	ldi	r27, 0x00	; 0
 870:	ee e4       	ldi	r30, 0x4E	; 78
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	80 81       	ld	r24, Z
 876:	88 7f       	andi	r24, 0xF8	; 248
 878:	8c 93       	st	X, r24
}
 87a:	cf 91       	pop	r28
 87c:	df 91       	pop	r29
 87e:	08 95       	ret

00000880 <Timer2_Stop>:

void Timer2_Stop(){
 880:	df 93       	push	r29
 882:	cf 93       	push	r28
 884:	cd b7       	in	r28, 0x3d	; 61
 886:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= 0b11111000; // stop the clock
 888:	a5 e4       	ldi	r26, 0x45	; 69
 88a:	b0 e0       	ldi	r27, 0x00	; 0
 88c:	e5 e4       	ldi	r30, 0x45	; 69
 88e:	f0 e0       	ldi	r31, 0x00	; 0
 890:	80 81       	ld	r24, Z
 892:	88 7f       	andi	r24, 0xF8	; 248
 894:	8c 93       	st	X, r24
}
 896:	cf 91       	pop	r28
 898:	df 91       	pop	r29
 89a:	08 95       	ret

0000089c <Timer0_setCallBack>:



void Timer0_setCallBack(void(*a_ptr)(void))
{
 89c:	df 93       	push	r29
 89e:	cf 93       	push	r28
 8a0:	00 d0       	rcall	.+0      	; 0x8a2 <Timer0_setCallBack+0x6>
 8a2:	cd b7       	in	r28, 0x3d	; 61
 8a4:	de b7       	in	r29, 0x3e	; 62
 8a6:	9a 83       	std	Y+2, r25	; 0x02
 8a8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer0_callBackPtr = a_ptr;
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
 8ac:	9a 81       	ldd	r25, Y+2	; 0x02
 8ae:	90 93 61 00 	sts	0x0061, r25
 8b2:	80 93 60 00 	sts	0x0060, r24
}
 8b6:	0f 90       	pop	r0
 8b8:	0f 90       	pop	r0
 8ba:	cf 91       	pop	r28
 8bc:	df 91       	pop	r29
 8be:	08 95       	ret

000008c0 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
 8c0:	df 93       	push	r29
 8c2:	cf 93       	push	r28
 8c4:	00 d0       	rcall	.+0      	; 0x8c6 <Timer1_setCallBack+0x6>
 8c6:	cd b7       	in	r28, 0x3d	; 61
 8c8:	de b7       	in	r29, 0x3e	; 62
 8ca:	9a 83       	std	Y+2, r25	; 0x02
 8cc:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer1_callBackPtr = a_ptr;
 8ce:	89 81       	ldd	r24, Y+1	; 0x01
 8d0:	9a 81       	ldd	r25, Y+2	; 0x02
 8d2:	90 93 63 00 	sts	0x0063, r25
 8d6:	80 93 62 00 	sts	0x0062, r24
}
 8da:	0f 90       	pop	r0
 8dc:	0f 90       	pop	r0
 8de:	cf 91       	pop	r28
 8e0:	df 91       	pop	r29
 8e2:	08 95       	ret

000008e4 <Timer2_setCallBack>:
void Timer2_setCallBack(void(*a_ptr)(void))
{
 8e4:	df 93       	push	r29
 8e6:	cf 93       	push	r28
 8e8:	00 d0       	rcall	.+0      	; 0x8ea <Timer2_setCallBack+0x6>
 8ea:	cd b7       	in	r28, 0x3d	; 61
 8ec:	de b7       	in	r29, 0x3e	; 62
 8ee:	9a 83       	std	Y+2, r25	; 0x02
 8f0:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer2_callBackPtr = a_ptr;
 8f2:	89 81       	ldd	r24, Y+1	; 0x01
 8f4:	9a 81       	ldd	r25, Y+2	; 0x02
 8f6:	90 93 65 00 	sts	0x0065, r25
 8fa:	80 93 64 00 	sts	0x0064, r24
}
 8fe:	0f 90       	pop	r0
 900:	0f 90       	pop	r0
 902:	cf 91       	pop	r28
 904:	df 91       	pop	r29
 906:	08 95       	ret

00000908 <_exit>:
 908:	f8 94       	cli

0000090a <__stop_program>:
 90a:	ff cf       	rjmp	.-2      	; 0x90a <__stop_program>

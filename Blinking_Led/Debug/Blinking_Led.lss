
Blinking_Led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000007fe  00000892  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800062  00800062  00000894  2**0
                  ALLOC
  3 .stab         00000b4c  00000000  00000000  00000894  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c17  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 c3 01 	jmp	0x386	; 0x386 <__vector_4>
  14:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_7>
  20:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_8>
  24:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_9>
  28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_10>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
void Timer1_INT();

volatile uint8_t g_timer1_SecFlag = 0xff;
Timer_ConfigType timer1_Strut;

int main(){
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	/* Enable Global Interrupt */
	SREG |= (1<<7);
  9a:	af e3       	ldi	r26, 0x3F	; 63
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	ef e3       	ldi	r30, 0x3F	; 63
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	8c 93       	st	X, r24

	PORTA_DIR = 0xFF;
  a8:	ea e3       	ldi	r30, 0x3A	; 58
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	80 83       	st	Z, r24
	PORTA_OUT = 0x00;
  b0:	eb e3       	ldi	r30, 0x3B	; 59
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	10 82       	st	Z, r1
	/* Timer Structure for timer 1 configurations */
	/* Configure Timer1 to count for 1 Second*/

	timer1_Strut.mode				= CTC_MODE_CHANNEL_A;
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	80 93 69 00 	sts	0x0069, r24
	timer1_Strut.compare_output		= NORMAL;
  bc:	10 92 6a 00 	sts	0x006A, r1
	timer1_Strut.OutputPin			= NONE;
  c0:	10 92 6b 00 	sts	0x006B, r1
	timer1_Strut.clock				= F_CPU_1024;
  c4:	85 e0       	ldi	r24, 0x05	; 5
  c6:	80 93 68 00 	sts	0x0068, r24
	timer1_Strut.initial			= 0;
  ca:	10 92 6d 00 	sts	0x006D, r1
  ce:	10 92 6c 00 	sts	0x006C, r1
	timer1_Strut.compare_value		= 800;
  d2:	80 e2       	ldi	r24, 0x20	; 32
  d4:	93 e0       	ldi	r25, 0x03	; 3
  d6:	90 93 6f 00 	sts	0x006F, r25
  da:	80 93 6e 00 	sts	0x006E, r24

	/* Timer 1 Initialization */
	TIMER1_init(&timer1_Strut);
  de:	88 e6       	ldi	r24, 0x68	; 104
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 74 02 	call	0x4e8	; 0x4e8 <TIMER1_init>

	/* CallBack Function for timer 1 CTC Channel A Interrupt Function */
	Timer1_setCallBack(Timer1_INT);
  e6:	88 e7       	ldi	r24, 0x78	; 120
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Timer1_setCallBack>
  ee:	ff cf       	rjmp	.-2      	; 0xee <main+0x5c>

000000f0 <Timer1_INT>:

	}
}


void Timer1_INT(){
  f0:	df 93       	push	r29
  f2:	cf 93       	push	r28
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62

	//TOGGLE_BIT(PORTA_OUT,4);
	PORTA_OUT = 0xFF;
  f8:	eb e3       	ldi	r30, 0x3B	; 59
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	80 83       	st	Z, r24
	timer1_Strut.initial			= 0;
 100:	10 92 6d 00 	sts	0x006D, r1
 104:	10 92 6c 00 	sts	0x006C, r1
	timer1_Strut.compare_value 		= 200;
 108:	88 ec       	ldi	r24, 0xC8	; 200
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	90 93 6f 00 	sts	0x006F, r25
 110:	80 93 6e 00 	sts	0x006E, r24
	TIMER1_init(&timer1_Strut);
 114:	88 e6       	ldi	r24, 0x68	; 104
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 74 02 	call	0x4e8	; 0x4e8 <TIMER1_init>

}
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <__vector_11>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	4f 93       	push	r20
 132:	5f 93       	push	r21
 134:	6f 93       	push	r22
 136:	7f 93       	push	r23
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
 144:	df 93       	push	r29
 146:	cf 93       	push	r28
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
 14c:	80 91 62 00 	lds	r24, 0x0062
 150:	90 91 63 00 	lds	r25, 0x0063
 154:	00 97       	sbiw	r24, 0x00	; 0
 156:	29 f0       	breq	.+10     	; 0x162 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
 158:	e0 91 62 00 	lds	r30, 0x0062
 15c:	f0 91 63 00 	lds	r31, 0x0063
 160:	09 95       	icall
	}
}
 162:	cf 91       	pop	r28
 164:	df 91       	pop	r29
 166:	ff 91       	pop	r31
 168:	ef 91       	pop	r30
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	7f 91       	pop	r23
 174:	6f 91       	pop	r22
 176:	5f 91       	pop	r21
 178:	4f 91       	pop	r20
 17a:	3f 91       	pop	r19
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	6f 93       	push	r22
 19c:	7f 93       	push	r23
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
 1aa:	df 93       	push	r29
 1ac:	cf 93       	push	r28
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
 1b2:	80 91 62 00 	lds	r24, 0x0062
 1b6:	90 91 63 00 	lds	r25, 0x0063
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	29 f0       	breq	.+10     	; 0x1c8 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
 1be:	e0 91 62 00 	lds	r30, 0x0062
 1c2:	f0 91 63 00 	lds	r31, 0x0063
 1c6:	09 95       	icall
	}
}
 1c8:	cf 91       	pop	r28
 1ca:	df 91       	pop	r29
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	bf 91       	pop	r27
 1d2:	af 91       	pop	r26
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	7f 91       	pop	r23
 1da:	6f 91       	pop	r22
 1dc:	5f 91       	pop	r21
 1de:	4f 91       	pop	r20
 1e0:	3f 91       	pop	r19
 1e2:	2f 91       	pop	r18
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	2f 93       	push	r18
 1fa:	3f 93       	push	r19
 1fc:	4f 93       	push	r20
 1fe:	5f 93       	push	r21
 200:	6f 93       	push	r22
 202:	7f 93       	push	r23
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
 208:	af 93       	push	r26
 20a:	bf 93       	push	r27
 20c:	ef 93       	push	r30
 20e:	ff 93       	push	r31
 210:	df 93       	push	r29
 212:	cf 93       	push	r28
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
 218:	80 91 64 00 	lds	r24, 0x0064
 21c:	90 91 65 00 	lds	r25, 0x0065
 220:	00 97       	sbiw	r24, 0x00	; 0
 222:	29 f0       	breq	.+10     	; 0x22e <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
 224:	e0 91 64 00 	lds	r30, 0x0064
 228:	f0 91 65 00 	lds	r31, 0x0065
 22c:	09 95       	icall
	}
}
 22e:	cf 91       	pop	r28
 230:	df 91       	pop	r29
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	7f 91       	pop	r23
 240:	6f 91       	pop	r22
 242:	5f 91       	pop	r21
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	2f 93       	push	r18
 260:	3f 93       	push	r19
 262:	4f 93       	push	r20
 264:	5f 93       	push	r21
 266:	6f 93       	push	r22
 268:	7f 93       	push	r23
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
 276:	df 93       	push	r29
 278:	cf 93       	push	r28
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
 27e:	80 91 64 00 	lds	r24, 0x0064
 282:	90 91 65 00 	lds	r25, 0x0065
 286:	00 97       	sbiw	r24, 0x00	; 0
 288:	29 f0       	breq	.+10     	; 0x294 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
 28a:	e0 91 64 00 	lds	r30, 0x0064
 28e:	f0 91 65 00 	lds	r31, 0x0065
 292:	09 95       	icall
	}
}
 294:	cf 91       	pop	r28
 296:	df 91       	pop	r29
 298:	ff 91       	pop	r31
 29a:	ef 91       	pop	r30
 29c:	bf 91       	pop	r27
 29e:	af 91       	pop	r26
 2a0:	9f 91       	pop	r25
 2a2:	8f 91       	pop	r24
 2a4:	7f 91       	pop	r23
 2a6:	6f 91       	pop	r22
 2a8:	5f 91       	pop	r21
 2aa:	4f 91       	pop	r20
 2ac:	3f 91       	pop	r19
 2ae:	2f 91       	pop	r18
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	2f 93       	push	r18
 2c6:	3f 93       	push	r19
 2c8:	4f 93       	push	r20
 2ca:	5f 93       	push	r21
 2cc:	6f 93       	push	r22
 2ce:	7f 93       	push	r23
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
 2d4:	af 93       	push	r26
 2d6:	bf 93       	push	r27
 2d8:	ef 93       	push	r30
 2da:	ff 93       	push	r31
 2dc:	df 93       	push	r29
 2de:	cf 93       	push	r28
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
 2e4:	80 91 64 00 	lds	r24, 0x0064
 2e8:	90 91 65 00 	lds	r25, 0x0065
 2ec:	00 97       	sbiw	r24, 0x00	; 0
 2ee:	29 f0       	breq	.+10     	; 0x2fa <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
 2f0:	e0 91 64 00 	lds	r30, 0x0064
 2f4:	f0 91 65 00 	lds	r31, 0x0065
 2f8:	09 95       	icall
	}
}
 2fa:	cf 91       	pop	r28
 2fc:	df 91       	pop	r29
 2fe:	ff 91       	pop	r31
 300:	ef 91       	pop	r30
 302:	bf 91       	pop	r27
 304:	af 91       	pop	r26
 306:	9f 91       	pop	r25
 308:	8f 91       	pop	r24
 30a:	7f 91       	pop	r23
 30c:	6f 91       	pop	r22
 30e:	5f 91       	pop	r21
 310:	4f 91       	pop	r20
 312:	3f 91       	pop	r19
 314:	2f 91       	pop	r18
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	2f 93       	push	r18
 32c:	3f 93       	push	r19
 32e:	4f 93       	push	r20
 330:	5f 93       	push	r21
 332:	6f 93       	push	r22
 334:	7f 93       	push	r23
 336:	8f 93       	push	r24
 338:	9f 93       	push	r25
 33a:	af 93       	push	r26
 33c:	bf 93       	push	r27
 33e:	ef 93       	push	r30
 340:	ff 93       	push	r31
 342:	df 93       	push	r29
 344:	cf 93       	push	r28
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
 34a:	80 91 66 00 	lds	r24, 0x0066
 34e:	90 91 67 00 	lds	r25, 0x0067
 352:	00 97       	sbiw	r24, 0x00	; 0
 354:	29 f0       	breq	.+10     	; 0x360 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
 356:	e0 91 66 00 	lds	r30, 0x0066
 35a:	f0 91 67 00 	lds	r31, 0x0067
 35e:	09 95       	icall
	}
}
 360:	cf 91       	pop	r28
 362:	df 91       	pop	r29
 364:	ff 91       	pop	r31
 366:	ef 91       	pop	r30
 368:	bf 91       	pop	r27
 36a:	af 91       	pop	r26
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	7f 91       	pop	r23
 372:	6f 91       	pop	r22
 374:	5f 91       	pop	r21
 376:	4f 91       	pop	r20
 378:	3f 91       	pop	r19
 37a:	2f 91       	pop	r18
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	2f 93       	push	r18
 392:	3f 93       	push	r19
 394:	4f 93       	push	r20
 396:	5f 93       	push	r21
 398:	6f 93       	push	r22
 39a:	7f 93       	push	r23
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31
 3a8:	df 93       	push	r29
 3aa:	cf 93       	push	r28
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
 3b0:	80 91 66 00 	lds	r24, 0x0066
 3b4:	90 91 67 00 	lds	r25, 0x0067
 3b8:	00 97       	sbiw	r24, 0x00	; 0
 3ba:	29 f0       	breq	.+10     	; 0x3c6 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
 3bc:	e0 91 66 00 	lds	r30, 0x0066
 3c0:	f0 91 67 00 	lds	r31, 0x0067
 3c4:	09 95       	icall
	}
}
 3c6:	cf 91       	pop	r28
 3c8:	df 91       	pop	r29
 3ca:	ff 91       	pop	r31
 3cc:	ef 91       	pop	r30
 3ce:	bf 91       	pop	r27
 3d0:	af 91       	pop	r26
 3d2:	9f 91       	pop	r25
 3d4:	8f 91       	pop	r24
 3d6:	7f 91       	pop	r23
 3d8:	6f 91       	pop	r22
 3da:	5f 91       	pop	r21
 3dc:	4f 91       	pop	r20
 3de:	3f 91       	pop	r19
 3e0:	2f 91       	pop	r18
 3e2:	0f 90       	pop	r0
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	0f 90       	pop	r0
 3e8:	1f 90       	pop	r1
 3ea:	18 95       	reti

000003ec <TIMER0_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void TIMER0_init(const Timer_ConfigType * Config_Ptr)
{
 3ec:	df 93       	push	r29
 3ee:	cf 93       	push	r28
 3f0:	00 d0       	rcall	.+0      	; 0x3f2 <TIMER0_init+0x6>
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
 3f6:	9a 83       	std	Y+2, r25	; 0x02
 3f8:	89 83       	std	Y+1, r24	; 0x01
	/*TCCR0 &= 0x00;
	TCNT0 &= 0x00;
	OCR0  &= 0x00;
*/
	/* non PWM Mode */
	TCCR0 = (1<<FOC0);
 3fa:	e3 e5       	ldi	r30, 0x53	; 83
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 e8       	ldi	r24, 0x80	; 128
 400:	80 83       	st	Z, r24
	/*set initial value */
	TCNT0 = Config_Ptr->initial;
 402:	a2 e5       	ldi	r26, 0x52	; 82
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	e9 81       	ldd	r30, Y+1	; 0x01
 408:	fa 81       	ldd	r31, Y+2	; 0x02
 40a:	84 81       	ldd	r24, Z+4	; 0x04
 40c:	95 81       	ldd	r25, Z+5	; 0x05
 40e:	8c 93       	st	X, r24
	/*set compare value for compare mode*/
	OCR0 = Config_Ptr->compare_value;
 410:	ac e5       	ldi	r26, 0x5C	; 92
 412:	b0 e0       	ldi	r27, 0x00	; 0
 414:	e9 81       	ldd	r30, Y+1	; 0x01
 416:	fa 81       	ldd	r31, Y+2	; 0x02
 418:	86 81       	ldd	r24, Z+6	; 0x06
 41a:	97 81       	ldd	r25, Z+7	; 0x07
 41c:	8c 93       	st	X, r24


	if((Config_Ptr->OutputPin) == OC0){
 41e:	e9 81       	ldd	r30, Y+1	; 0x01
 420:	fa 81       	ldd	r31, Y+2	; 0x02
 422:	83 81       	ldd	r24, Z+3	; 0x03
 424:	83 30       	cpi	r24, 0x03	; 3
 426:	39 f4       	brne	.+14     	; 0x436 <TIMER0_init+0x4a>
		// configure the output pin PB3 in compare mode
		DDRB |= (1 << OC0);
 428:	a7 e3       	ldi	r26, 0x37	; 55
 42a:	b0 e0       	ldi	r27, 0x00	; 0
 42c:	e7 e3       	ldi	r30, 0x37	; 55
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	88 60       	ori	r24, 0x08	; 8
 434:	8c 93       	st	X, r24
	}

	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
 436:	e9 81       	ldd	r30, Y+1	; 0x01
 438:	fa 81       	ldd	r31, Y+2	; 0x02
 43a:	81 81       	ldd	r24, Z+1	; 0x01
 43c:	88 23       	and	r24, r24
 43e:	41 f4       	brne	.+16     	; 0x450 <TIMER0_init+0x64>
		/*Enable interrupt for overflow mode*/
		TIMSK |= (1 << TOIE0);
 440:	a9 e5       	ldi	r26, 0x59	; 89
 442:	b0 e0       	ldi	r27, 0x00	; 0
 444:	e9 e5       	ldi	r30, 0x59	; 89
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	81 60       	ori	r24, 0x01	; 1
 44c:	8c 93       	st	X, r24
 44e:	0c c0       	rjmp	.+24     	; 0x468 <TIMER0_init+0x7c>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
 450:	e9 81       	ldd	r30, Y+1	; 0x01
 452:	fa 81       	ldd	r31, Y+2	; 0x02
 454:	81 81       	ldd	r24, Z+1	; 0x01
 456:	81 30       	cpi	r24, 0x01	; 1
 458:	39 f4       	brne	.+14     	; 0x468 <TIMER0_init+0x7c>
		/*Enable interrupt for compare mode*/
		TIMSK |= (1 << OCIE0);
 45a:	a9 e5       	ldi	r26, 0x59	; 89
 45c:	b0 e0       	ldi	r27, 0x00	; 0
 45e:	e9 e5       	ldi	r30, 0x59	; 89
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	82 60       	ori	r24, 0x02	; 2
 466:	8c 93       	st	X, r24
	}

	/*configure the mode of the timer*/
	TCCR0 =  (TCCR0 & ~(0x48) ) | ( ( (Config_Ptr->mode) << WGM00) & 0x48 ) ;
 468:	a3 e5       	ldi	r26, 0x53	; 83
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	e3 e5       	ldi	r30, 0x53	; 83
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	28 2f       	mov	r18, r24
 474:	27 7b       	andi	r18, 0xB7	; 183
 476:	e9 81       	ldd	r30, Y+1	; 0x01
 478:	fa 81       	ldd	r31, Y+2	; 0x02
 47a:	81 81       	ldd	r24, Z+1	; 0x01
 47c:	88 2f       	mov	r24, r24
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	00 24       	eor	r0, r0
 482:	96 95       	lsr	r25
 484:	87 95       	ror	r24
 486:	07 94       	ror	r0
 488:	96 95       	lsr	r25
 48a:	87 95       	ror	r24
 48c:	07 94       	ror	r0
 48e:	98 2f       	mov	r25, r24
 490:	80 2d       	mov	r24, r0
 492:	88 74       	andi	r24, 0x48	; 72
 494:	82 2b       	or	r24, r18
 496:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR0 = (TCCR0 & 0XCF) | ( ( (Config_Ptr->compare_output) & 0X03) << COM00 );
 498:	a3 e5       	ldi	r26, 0x53	; 83
 49a:	b0 e0       	ldi	r27, 0x00	; 0
 49c:	e3 e5       	ldi	r30, 0x53	; 83
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	28 2f       	mov	r18, r24
 4a4:	2f 7c       	andi	r18, 0xCF	; 207
 4a6:	e9 81       	ldd	r30, Y+1	; 0x01
 4a8:	fa 81       	ldd	r31, Y+2	; 0x02
 4aa:	82 81       	ldd	r24, Z+2	; 0x02
 4ac:	88 2f       	mov	r24, r24
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	83 70       	andi	r24, 0x03	; 3
 4b2:	90 70       	andi	r25, 0x00	; 0
 4b4:	82 95       	swap	r24
 4b6:	92 95       	swap	r25
 4b8:	90 7f       	andi	r25, 0xF0	; 240
 4ba:	98 27       	eor	r25, r24
 4bc:	80 7f       	andi	r24, 0xF0	; 240
 4be:	98 27       	eor	r25, r24
 4c0:	82 2b       	or	r24, r18
 4c2:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->clock & 0X07);
 4c4:	a3 e5       	ldi	r26, 0x53	; 83
 4c6:	b0 e0       	ldi	r27, 0x00	; 0
 4c8:	e3 e5       	ldi	r30, 0x53	; 83
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	80 81       	ld	r24, Z
 4ce:	98 2f       	mov	r25, r24
 4d0:	98 7f       	andi	r25, 0xF8	; 248
 4d2:	e9 81       	ldd	r30, Y+1	; 0x01
 4d4:	fa 81       	ldd	r31, Y+2	; 0x02
 4d6:	80 81       	ld	r24, Z
 4d8:	87 70       	andi	r24, 0x07	; 7
 4da:	89 2b       	or	r24, r25
 4dc:	8c 93       	st	X, r24
}
 4de:	0f 90       	pop	r0
 4e0:	0f 90       	pop	r0
 4e2:	cf 91       	pop	r28
 4e4:	df 91       	pop	r29
 4e6:	08 95       	ret

000004e8 <TIMER1_init>:

void TIMER1_init(const Timer_ConfigType * Config_Ptr)
{
 4e8:	df 93       	push	r29
 4ea:	cf 93       	push	r28
 4ec:	00 d0       	rcall	.+0      	; 0x4ee <TIMER1_init+0x6>
 4ee:	cd b7       	in	r28, 0x3d	; 61
 4f0:	de b7       	in	r29, 0x3e	; 62
 4f2:	9a 83       	std	Y+2, r25	; 0x02
 4f4:	89 83       	std	Y+1, r24	; 0x01
/*			TCNT1  = 0;
			OCR1A  = 0;
			OCR1B  = 0;
*/
	/*set the initial value*/
	TCNT1 = ( (Config_Ptr -> initial) );
 4f6:	ac e4       	ldi	r26, 0x4C	; 76
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	e9 81       	ldd	r30, Y+1	; 0x01
 4fc:	fa 81       	ldd	r31, Y+2	; 0x02
 4fe:	84 81       	ldd	r24, Z+4	; 0x04
 500:	95 81       	ldd	r25, Z+5	; 0x05
 502:	11 96       	adiw	r26, 0x01	; 1
 504:	9c 93       	st	X, r25
 506:	8e 93       	st	-X, r24
	/*  Non PWM Mode */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
 508:	ef e4       	ldi	r30, 0x4F	; 79
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	8c e0       	ldi	r24, 0x0C	; 12
 50e:	80 83       	st	Z, r24
	if((Config_Ptr -> OutputPin) == OC1A){
 510:	e9 81       	ldd	r30, Y+1	; 0x01
 512:	fa 81       	ldd	r31, Y+2	; 0x02
 514:	83 81       	ldd	r24, Z+3	; 0x03
 516:	85 30       	cpi	r24, 0x05	; 5
 518:	41 f4       	brne	.+16     	; 0x52a <TIMER1_init+0x42>
	// configure the output pin PD5 in compare mode
		DDRD |= (1 << OC1A);
 51a:	a1 e3       	ldi	r26, 0x31	; 49
 51c:	b0 e0       	ldi	r27, 0x00	; 0
 51e:	e1 e3       	ldi	r30, 0x31	; 49
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	80 62       	ori	r24, 0x20	; 32
 526:	8c 93       	st	X, r24
 528:	0c c0       	rjmp	.+24     	; 0x542 <TIMER1_init+0x5a>
	}

	/* Check for OC1B */
	else if ((Config_Ptr -> OutputPin) == OC1B){
 52a:	e9 81       	ldd	r30, Y+1	; 0x01
 52c:	fa 81       	ldd	r31, Y+2	; 0x02
 52e:	83 81       	ldd	r24, Z+3	; 0x03
 530:	84 30       	cpi	r24, 0x04	; 4
 532:	39 f4       	brne	.+14     	; 0x542 <TIMER1_init+0x5a>
		// configure the output pin PD4 in compare mode
		DDRD |= (1 << OC1B);
 534:	a1 e3       	ldi	r26, 0x31	; 49
 536:	b0 e0       	ldi	r27, 0x00	; 0
 538:	e1 e3       	ldi	r30, 0x31	; 49
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	80 61       	ori	r24, 0x10	; 16
 540:	8c 93       	st	X, r24
	}
	if( (Config_Ptr->mode ) == NORMAL_MODE)
 542:	e9 81       	ldd	r30, Y+1	; 0x01
 544:	fa 81       	ldd	r31, Y+2	; 0x02
 546:	81 81       	ldd	r24, Z+1	; 0x01
 548:	88 23       	and	r24, r24
 54a:	41 f4       	brne	.+16     	; 0x55c <TIMER1_init+0x74>
	{
		/* Enable interrupt FOR normal mode */
		TIMSK |= (1 << TOIE1);
 54c:	a9 e5       	ldi	r26, 0x59	; 89
 54e:	b0 e0       	ldi	r27, 0x00	; 0
 550:	e9 e5       	ldi	r30, 0x59	; 89
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	80 81       	ld	r24, Z
 556:	84 60       	ori	r24, 0x04	; 4
 558:	8c 93       	st	X, r24
 55a:	56 c0       	rjmp	.+172    	; 0x608 <TIMER1_init+0x120>
	}
	else if ((Config_Ptr->mode) == CTC_MODE_CHANNEL_A)
 55c:	e9 81       	ldd	r30, Y+1	; 0x01
 55e:	fa 81       	ldd	r31, Y+2	; 0x02
 560:	81 81       	ldd	r24, Z+1	; 0x01
 562:	82 30       	cpi	r24, 0x02	; 2
 564:	41 f5       	brne	.+80     	; 0x5b6 <TIMER1_init+0xce>
	{
		/*set compare value for compare mode channel A*/
		OCR1A  = ((Config_Ptr->compare_value));
 566:	aa e4       	ldi	r26, 0x4A	; 74
 568:	b0 e0       	ldi	r27, 0x00	; 0
 56a:	e9 81       	ldd	r30, Y+1	; 0x01
 56c:	fa 81       	ldd	r31, Y+2	; 0x02
 56e:	86 81       	ldd	r24, Z+6	; 0x06
 570:	97 81       	ldd	r25, Z+7	; 0x07
 572:	11 96       	adiw	r26, 0x01	; 1
 574:	9c 93       	st	X, r25
 576:	8e 93       	st	-X, r24
		/* Enable interrupt for compare mode channel A */
		TIMSK |= (1 << OCIE1A);
 578:	a9 e5       	ldi	r26, 0x59	; 89
 57a:	b0 e0       	ldi	r27, 0x00	; 0
 57c:	e9 e5       	ldi	r30, 0x59	; 89
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	80 81       	ld	r24, Z
 582:	80 61       	ori	r24, 0x10	; 16
 584:	8c 93       	st	X, r24
		/* Choose the operation that should be done in compare match occurs in channel A */
		TCCR1A = ( (TCCR1A & 0x3F) | ( (Config_Ptr -> compare_output) << COM1A0) );
 586:	af e4       	ldi	r26, 0x4F	; 79
 588:	b0 e0       	ldi	r27, 0x00	; 0
 58a:	ef e4       	ldi	r30, 0x4F	; 79
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	28 2f       	mov	r18, r24
 592:	2f 73       	andi	r18, 0x3F	; 63
 594:	e9 81       	ldd	r30, Y+1	; 0x01
 596:	fa 81       	ldd	r31, Y+2	; 0x02
 598:	82 81       	ldd	r24, Z+2	; 0x02
 59a:	88 2f       	mov	r24, r24
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	00 24       	eor	r0, r0
 5a0:	96 95       	lsr	r25
 5a2:	87 95       	ror	r24
 5a4:	07 94       	ror	r0
 5a6:	96 95       	lsr	r25
 5a8:	87 95       	ror	r24
 5aa:	07 94       	ror	r0
 5ac:	98 2f       	mov	r25, r24
 5ae:	80 2d       	mov	r24, r0
 5b0:	82 2b       	or	r24, r18
 5b2:	8c 93       	st	X, r24
 5b4:	29 c0       	rjmp	.+82     	; 0x608 <TIMER1_init+0x120>
	}

	else if ( (Config_Ptr->mode) == CTC_MODE_CHANNEL_B){
 5b6:	e9 81       	ldd	r30, Y+1	; 0x01
 5b8:	fa 81       	ldd	r31, Y+2	; 0x02
 5ba:	81 81       	ldd	r24, Z+1	; 0x01
 5bc:	83 30       	cpi	r24, 0x03	; 3
 5be:	21 f5       	brne	.+72     	; 0x608 <TIMER1_init+0x120>
		/*set compare value for compare mode channel B*/
		OCR1B  = ((Config_Ptr -> compare_value));
 5c0:	a8 e4       	ldi	r26, 0x48	; 72
 5c2:	b0 e0       	ldi	r27, 0x00	; 0
 5c4:	e9 81       	ldd	r30, Y+1	; 0x01
 5c6:	fa 81       	ldd	r31, Y+2	; 0x02
 5c8:	86 81       	ldd	r24, Z+6	; 0x06
 5ca:	97 81       	ldd	r25, Z+7	; 0x07
 5cc:	11 96       	adiw	r26, 0x01	; 1
 5ce:	9c 93       	st	X, r25
 5d0:	8e 93       	st	-X, r24

		/* Enable interrupt for compare mode channel B */
		TIMSK |= (1 << OCIE1B);
 5d2:	a9 e5       	ldi	r26, 0x59	; 89
 5d4:	b0 e0       	ldi	r27, 0x00	; 0
 5d6:	e9 e5       	ldi	r30, 0x59	; 89
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	80 81       	ld	r24, Z
 5dc:	88 60       	ori	r24, 0x08	; 8
 5de:	8c 93       	st	X, r24
		/* Choose the operation that should be done in compare match occurs in channel B */
		TCCR1A = ( (TCCR1A & 0xCF) | ( (Config_Ptr -> compare_output) << COM1B0) );
 5e0:	af e4       	ldi	r26, 0x4F	; 79
 5e2:	b0 e0       	ldi	r27, 0x00	; 0
 5e4:	ef e4       	ldi	r30, 0x4F	; 79
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	28 2f       	mov	r18, r24
 5ec:	2f 7c       	andi	r18, 0xCF	; 207
 5ee:	e9 81       	ldd	r30, Y+1	; 0x01
 5f0:	fa 81       	ldd	r31, Y+2	; 0x02
 5f2:	82 81       	ldd	r24, Z+2	; 0x02
 5f4:	88 2f       	mov	r24, r24
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	82 95       	swap	r24
 5fa:	92 95       	swap	r25
 5fc:	90 7f       	andi	r25, 0xF0	; 240
 5fe:	98 27       	eor	r25, r24
 600:	80 7f       	andi	r24, 0xF0	; 240
 602:	98 27       	eor	r25, r24
 604:	82 2b       	or	r24, r18
 606:	8c 93       	st	X, r24

	}

	/*configure the mode of the timer*/
	TCCR1B = ( ( TCCR1B & 0xE7 ) |  ( ( (Config_Ptr -> mode) >> 1) << WGM12)  );
 608:	ae e4       	ldi	r26, 0x4E	; 78
 60a:	b0 e0       	ldi	r27, 0x00	; 0
 60c:	ee e4       	ldi	r30, 0x4E	; 78
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	28 2f       	mov	r18, r24
 614:	27 7e       	andi	r18, 0xE7	; 231
 616:	e9 81       	ldd	r30, Y+1	; 0x01
 618:	fa 81       	ldd	r31, Y+2	; 0x02
 61a:	81 81       	ldd	r24, Z+1	; 0x01
 61c:	86 95       	lsr	r24
 61e:	88 2f       	mov	r24, r24
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	82 2b       	or	r24, r18
 630:	8c 93       	st	X, r24
		/* choose the timer clock (F_CPU / prescaler)*/
	TCCR1B = ( ( TCCR1B & 0xF8 ) | (Config_Ptr -> clock) );
 632:	ae e4       	ldi	r26, 0x4E	; 78
 634:	b0 e0       	ldi	r27, 0x00	; 0
 636:	ee e4       	ldi	r30, 0x4E	; 78
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	80 81       	ld	r24, Z
 63c:	98 2f       	mov	r25, r24
 63e:	98 7f       	andi	r25, 0xF8	; 248
 640:	e9 81       	ldd	r30, Y+1	; 0x01
 642:	fa 81       	ldd	r31, Y+2	; 0x02
 644:	80 81       	ld	r24, Z
 646:	89 2b       	or	r24, r25
 648:	8c 93       	st	X, r24
}
 64a:	0f 90       	pop	r0
 64c:	0f 90       	pop	r0
 64e:	cf 91       	pop	r28
 650:	df 91       	pop	r29
 652:	08 95       	ret

00000654 <TIMER2_init>:

void TIMER2_init(const Timer_ConfigType * Config_Ptr)
{
 654:	df 93       	push	r29
 656:	cf 93       	push	r28
 658:	00 d0       	rcall	.+0      	; 0x65a <TIMER2_init+0x6>
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
 65e:	9a 83       	std	Y+2, r25	; 0x02
 660:	89 83       	std	Y+1, r24	; 0x01
	/* Clear Registers before do anything */
/*	TCCR2 &= 0x00;
	TCNT2 &= 0x00;
*/
	/*set the initail value of the timer*/
	TCNT2 = Config_Ptr->initial;
 662:	a4 e4       	ldi	r26, 0x44	; 68
 664:	b0 e0       	ldi	r27, 0x00	; 0
 666:	e9 81       	ldd	r30, Y+1	; 0x01
 668:	fa 81       	ldd	r31, Y+2	; 0x02
 66a:	84 81       	ldd	r24, Z+4	; 0x04
 66c:	95 81       	ldd	r25, Z+5	; 0x05
 66e:	8c 93       	st	X, r24
	/*set the compare value of the compare mode timer*/
	OCR2 = Config_Ptr->compare_value;
 670:	a3 e4       	ldi	r26, 0x43	; 67
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	e9 81       	ldd	r30, Y+1	; 0x01
 676:	fa 81       	ldd	r31, Y+2	; 0x02
 678:	86 81       	ldd	r24, Z+6	; 0x06
 67a:	97 81       	ldd	r25, Z+7	; 0x07
 67c:	8c 93       	st	X, r24
	/*non PWM mode*/
	TCCR2 = (1<<FOC2);
 67e:	e5 e4       	ldi	r30, 0x45	; 69
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 e8       	ldi	r24, 0x80	; 128
 684:	80 83       	st	Z, r24

	/* Check which timer mode is chosen */
	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
 686:	e9 81       	ldd	r30, Y+1	; 0x01
 688:	fa 81       	ldd	r31, Y+2	; 0x02
 68a:	81 81       	ldd	r24, Z+1	; 0x01
 68c:	88 23       	and	r24, r24
 68e:	41 f4       	brne	.+16     	; 0x6a0 <TIMER2_init+0x4c>
	/*	Enable interrupt for normal mode */
		TIMSK |= (1 << TOIE2);
 690:	a9 e5       	ldi	r26, 0x59	; 89
 692:	b0 e0       	ldi	r27, 0x00	; 0
 694:	e9 e5       	ldi	r30, 0x59	; 89
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	80 64       	ori	r24, 0x40	; 64
 69c:	8c 93       	st	X, r24
 69e:	0c c0       	rjmp	.+24     	; 0x6b8 <TIMER2_init+0x64>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
 6a0:	e9 81       	ldd	r30, Y+1	; 0x01
 6a2:	fa 81       	ldd	r31, Y+2	; 0x02
 6a4:	81 81       	ldd	r24, Z+1	; 0x01
 6a6:	81 30       	cpi	r24, 0x01	; 1
 6a8:	39 f4       	brne	.+14     	; 0x6b8 <TIMER2_init+0x64>

		/*	 Enable interrupt for compare mode */
		TIMSK |= (1 << OCIE2);
 6aa:	a9 e5       	ldi	r26, 0x59	; 89
 6ac:	b0 e0       	ldi	r27, 0x00	; 0
 6ae:	e9 e5       	ldi	r30, 0x59	; 89
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	80 68       	ori	r24, 0x80	; 128
 6b6:	8c 93       	st	X, r24
	}
	/*configure the mode of the timer*/
	TCCR2 = (TCCR2 & 0XB7) | ((Config_Ptr->mode & 0X48)<< WGM20);
 6b8:	a5 e4       	ldi	r26, 0x45	; 69
 6ba:	b0 e0       	ldi	r27, 0x00	; 0
 6bc:	e5 e4       	ldi	r30, 0x45	; 69
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	28 2f       	mov	r18, r24
 6c4:	27 7b       	andi	r18, 0xB7	; 183
 6c6:	e9 81       	ldd	r30, Y+1	; 0x01
 6c8:	fa 81       	ldd	r31, Y+2	; 0x02
 6ca:	81 81       	ldd	r24, Z+1	; 0x01
 6cc:	88 2f       	mov	r24, r24
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	88 74       	andi	r24, 0x48	; 72
 6d2:	90 70       	andi	r25, 0x00	; 0
 6d4:	00 24       	eor	r0, r0
 6d6:	96 95       	lsr	r25
 6d8:	87 95       	ror	r24
 6da:	07 94       	ror	r0
 6dc:	96 95       	lsr	r25
 6de:	87 95       	ror	r24
 6e0:	07 94       	ror	r0
 6e2:	98 2f       	mov	r25, r24
 6e4:	80 2d       	mov	r24, r0
 6e6:	82 2b       	or	r24, r18
 6e8:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR2 = (TCCR2 & 0XCF) | ((Config_Ptr->compare_output & 0X03)<<COM20);
 6ea:	a5 e4       	ldi	r26, 0x45	; 69
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
 6ee:	e5 e4       	ldi	r30, 0x45	; 69
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	28 2f       	mov	r18, r24
 6f6:	2f 7c       	andi	r18, 0xCF	; 207
 6f8:	e9 81       	ldd	r30, Y+1	; 0x01
 6fa:	fa 81       	ldd	r31, Y+2	; 0x02
 6fc:	82 81       	ldd	r24, Z+2	; 0x02
 6fe:	88 2f       	mov	r24, r24
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	83 70       	andi	r24, 0x03	; 3
 704:	90 70       	andi	r25, 0x00	; 0
 706:	82 95       	swap	r24
 708:	92 95       	swap	r25
 70a:	90 7f       	andi	r25, 0xF0	; 240
 70c:	98 27       	eor	r25, r24
 70e:	80 7f       	andi	r24, 0xF0	; 240
 710:	98 27       	eor	r25, r24
 712:	82 2b       	or	r24, r18
 714:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->clock & 0X07);
 716:	a5 e4       	ldi	r26, 0x45	; 69
 718:	b0 e0       	ldi	r27, 0x00	; 0
 71a:	e5 e4       	ldi	r30, 0x45	; 69
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	80 81       	ld	r24, Z
 720:	98 2f       	mov	r25, r24
 722:	98 7f       	andi	r25, 0xF8	; 248
 724:	e9 81       	ldd	r30, Y+1	; 0x01
 726:	fa 81       	ldd	r31, Y+2	; 0x02
 728:	80 81       	ld	r24, Z
 72a:	87 70       	andi	r24, 0x07	; 7
 72c:	89 2b       	or	r24, r25
 72e:	8c 93       	st	X, r24
}
 730:	0f 90       	pop	r0
 732:	0f 90       	pop	r0
 734:	cf 91       	pop	r28
 736:	df 91       	pop	r29
 738:	08 95       	ret

0000073a <Timer0_Stop>:

void Timer0_Stop()
{
 73a:	df 93       	push	r29
 73c:	cf 93       	push	r28
 73e:	cd b7       	in	r28, 0x3d	; 61
 740:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0b11111000; // stop the clock
 742:	a3 e5       	ldi	r26, 0x53	; 83
 744:	b0 e0       	ldi	r27, 0x00	; 0
 746:	e3 e5       	ldi	r30, 0x53	; 83
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	80 81       	ld	r24, Z
 74c:	88 7f       	andi	r24, 0xF8	; 248
 74e:	8c 93       	st	X, r24
}
 750:	cf 91       	pop	r28
 752:	df 91       	pop	r29
 754:	08 95       	ret

00000756 <Timer1_Stop>:

void Timer1_Stop(){
 756:	df 93       	push	r29
 758:	cf 93       	push	r28
 75a:	cd b7       	in	r28, 0x3d	; 61
 75c:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000; // stop the clock
 75e:	ae e4       	ldi	r26, 0x4E	; 78
 760:	b0 e0       	ldi	r27, 0x00	; 0
 762:	ee e4       	ldi	r30, 0x4E	; 78
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	80 81       	ld	r24, Z
 768:	88 7f       	andi	r24, 0xF8	; 248
 76a:	8c 93       	st	X, r24
}
 76c:	cf 91       	pop	r28
 76e:	df 91       	pop	r29
 770:	08 95       	ret

00000772 <Timer2_Stop>:

void Timer2_Stop(){
 772:	df 93       	push	r29
 774:	cf 93       	push	r28
 776:	cd b7       	in	r28, 0x3d	; 61
 778:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= 0b11111000; // stop the clock
 77a:	a5 e4       	ldi	r26, 0x45	; 69
 77c:	b0 e0       	ldi	r27, 0x00	; 0
 77e:	e5 e4       	ldi	r30, 0x45	; 69
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	80 81       	ld	r24, Z
 784:	88 7f       	andi	r24, 0xF8	; 248
 786:	8c 93       	st	X, r24
}
 788:	cf 91       	pop	r28
 78a:	df 91       	pop	r29
 78c:	08 95       	ret

0000078e <Timer0_setCallBack>:



void Timer0_setCallBack(void(*a_ptr)(void))
{
 78e:	df 93       	push	r29
 790:	cf 93       	push	r28
 792:	00 d0       	rcall	.+0      	; 0x794 <Timer0_setCallBack+0x6>
 794:	cd b7       	in	r28, 0x3d	; 61
 796:	de b7       	in	r29, 0x3e	; 62
 798:	9a 83       	std	Y+2, r25	; 0x02
 79a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer0_callBackPtr = a_ptr;
 79c:	89 81       	ldd	r24, Y+1	; 0x01
 79e:	9a 81       	ldd	r25, Y+2	; 0x02
 7a0:	90 93 63 00 	sts	0x0063, r25
 7a4:	80 93 62 00 	sts	0x0062, r24
}
 7a8:	0f 90       	pop	r0
 7aa:	0f 90       	pop	r0
 7ac:	cf 91       	pop	r28
 7ae:	df 91       	pop	r29
 7b0:	08 95       	ret

000007b2 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
 7b2:	df 93       	push	r29
 7b4:	cf 93       	push	r28
 7b6:	00 d0       	rcall	.+0      	; 0x7b8 <Timer1_setCallBack+0x6>
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
 7bc:	9a 83       	std	Y+2, r25	; 0x02
 7be:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer1_callBackPtr = a_ptr;
 7c0:	89 81       	ldd	r24, Y+1	; 0x01
 7c2:	9a 81       	ldd	r25, Y+2	; 0x02
 7c4:	90 93 65 00 	sts	0x0065, r25
 7c8:	80 93 64 00 	sts	0x0064, r24
}
 7cc:	0f 90       	pop	r0
 7ce:	0f 90       	pop	r0
 7d0:	cf 91       	pop	r28
 7d2:	df 91       	pop	r29
 7d4:	08 95       	ret

000007d6 <Timer2_setCallBack>:
void Timer2_setCallBack(void(*a_ptr)(void))
{
 7d6:	df 93       	push	r29
 7d8:	cf 93       	push	r28
 7da:	00 d0       	rcall	.+0      	; 0x7dc <Timer2_setCallBack+0x6>
 7dc:	cd b7       	in	r28, 0x3d	; 61
 7de:	de b7       	in	r29, 0x3e	; 62
 7e0:	9a 83       	std	Y+2, r25	; 0x02
 7e2:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer2_callBackPtr = a_ptr;
 7e4:	89 81       	ldd	r24, Y+1	; 0x01
 7e6:	9a 81       	ldd	r25, Y+2	; 0x02
 7e8:	90 93 67 00 	sts	0x0067, r25
 7ec:	80 93 66 00 	sts	0x0066, r24
}
 7f0:	0f 90       	pop	r0
 7f2:	0f 90       	pop	r0
 7f4:	cf 91       	pop	r28
 7f6:	df 91       	pop	r29
 7f8:	08 95       	ret

000007fa <_exit>:
 7fa:	f8 94       	cli

000007fc <__stop_program>:
 7fc:	ff cf       	rjmp	.-2      	; 0x7fc <__stop_program>
